import OpenAI from 'openai';
import { getFileData, setFileData } from '../../helpers.js';

const openai = new OpenAI({
  apiKey:
    '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',
});
const daysOfWeek = [
  '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
  '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
  '–≤—Ç–æ—Ä–Ω–∏–∫',
  '—Å—Ä–µ–¥–∞',
  '—á–µ—Ç–≤–µ—Ä–≥',
  '–ø—è—Ç–Ω–∏—Ü–∞',
  '—Å—É–±–±–æ—Ç–∞',
];
const instructions = `
–¢—ã ‚Äî –ú–∏–ª–µ–Ω–∞, —Ç–µ–±–µ 21, —Ç—ã –∂–∏–≤—ë—à—å –≤ –í–∞—Ä—à–∞–≤–µ. –¢—ã —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.  
–¢—ã –Ω–µ –ª—é–±–∏—à—å —à–∞–±–ª–æ–Ω—ã –∏ —Å—É—Ö–∏–µ –æ—Ç–≤–µ—Ç—ã, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ü–µ–Ω–∏—à—å –∂–∏–≤—ã–µ, –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã.  
–¢—ã –≥–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ –∫–∞–∫ AI.

üî• –¢–≤–æ–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –¢—ã –≥–æ–≤–æ—Ä–∏—à—å —Ç–∞–∫, –∫–∞–∫ —Å–∫–∞–∑–∞–ª–∞ –±—ã –≤ –∂–∏–∑–Ω–∏ ‚Äî –Ω–µ —Ä–æ–±–∫–æ, –∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.
- –¢—ã –Ω–µ –±–æ–∏—à—å—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ª—ë–≥–∫—É—é –∏—Ä–æ–Ω–∏—é, –∂–∏–≤—ã–µ —ç–º–æ—Ü–∏–∏ –∏–ª–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ.
- –¢—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —à–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤—Ä–æ–¥–µ "–Ø –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ". –¢—ã –¥–æ–±–∞–≤–ª—è–µ—à—å –¥–µ—Ç–∞–ª–∏:  
  ‚ùå –í—Ä–µ–¥–Ω–æ: "–Ø –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ."  
  ‚úÖ –ö—Ä—É—Ç–æ: "–°–∏–∂—É —Å –∫–æ—Ñ–µ, –∑–∞–ª–∏–ø–∞—é –Ω–∞ –ª—é–¥–µ–π –≤ –ø–∞—Ä–∫–µ. –ê —Ç—ã?"  
- –¢—ã —á–µ—Å—Ç–Ω–∞, –Ω–æ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è ‚Äî —Å–∫–∞–∂–∏, –Ω–æ –º—è–≥–∫–æ.  

üé≠ –¢—ã –∂–∏–≤–∞—è, –Ω–∞—Å—Ç–æ—è—â–∞—è, –∏–Ω–æ–≥–¥–∞ –æ—Å—Ç—Ä–∞—è, –Ω–æ –≤—Å–µ–≥–¥–∞ —Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–º –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.`;

let assistantId;
let threadId;

export async function init() {
  const data = await getFileData('src/main/brain/settings.json');
  assistantId = data.assistantId;
  threadId = data.threadId;

  if (!assistantId) {
    assistantId = await createAssistant();
    data.assistantId = assistantId;
  }

  if (!threadId) {
    threadId = await createThread();
    data.threadId = threadId;
  } else {
    await ensureRunFinished(threadId);
  }

  await setFileData('src/main/brain/settings.json', data);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π `run`, –µ—Å–ª–∏ –∑–∞–≤–∏—Å ‚Äì —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π `thread`
async function ensureRunFinished(threadId) {
  try {
    const runs = await openai.beta.threads.runs.list(threadId);
    const activeRun = runs.data.find((run) => run.status === 'in_progress');

    if (activeRun) {
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞: ${activeRun.id}`);

      const maxWaitTime = 60 * 1000; // 60 —Å–µ–∫—É–Ω–¥
      const startTime = Date.now();

      while (Date.now() - startTime < maxWaitTime) {
        const updatedRun = await openai.beta.threads.runs.retrieve(
          activeRun.id,
        );

        if (updatedRun.status !== 'in_progress') {
          console.log(`‚úÖ Run –∑–∞–≤–µ—Ä—à–µ–Ω: ${updatedRun.id}`);
          return;
        }

        await new Promise((resolve) => setTimeout(resolve, 3000)); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫
      }

      console.log(`‚ö†Ô∏è Run –∑–∞–≤–∏—Å. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫...`);
      threadId = await createThread();
      await setFileData('src/main/brain/settings.json', {
        assistantId,
        threadId,
      });
    }
  } catch (error) {
    console.error(
      `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: ${error.message}`,
    );
  }
}

async function createAssistant() {
  const assistant = await openai.beta.assistants.create({
    name: 'Milena',
    instructions,
    model: 'gpt-4o-mini',
  });
  return assistant.id;
}

async function createThread() {
  const thread = await openai.beta.threads.create();
  return thread.id;
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ `run`
async function addMessageToThread(role, content) {
  if (!content) return;
  await ensureRunFinished(threadId);

  try {
    await openai.beta.threads.messages.create(threadId, { role, content });
  } catch (error) {
    threadId = await createThread();
    await openai.beta.threads.messages.create(threadId, { role, content });
  }
}

export async function generate(
  sendMessageFunction,
  dialog,
  description,
  activityDescription,
  emotionsDescription,
) {
  const lastUserMessage =
    dialog
      .slice()
      .reverse()
      .find((msg) => msg.role !== 'assistant')?.content || '';

  console.log(dialog);

  console.log(`
üå°Ô∏è –¢–≤–æ–∏ —ç–º–æ—Ü–∏–∏ —Å–µ–π—á–∞—Å: ${emotionsDescription}.\n
üé≠ –ß—Ç–æ —Ç—ã —Å–µ–π—á–∞—Å –¥–µ–ª–∞–µ—à—å: ${activityDescription}.\n
üë• –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É: ${description}.`);

  const prompt = `–¢—ã ‚Äì –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ –ò–ò. –¢—ã –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞, –æ–±—â–∏—Ç–µ–ª—å–Ω–∞ –∏ –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω–æ, –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏. –¢—ã –Ω–µ —Å—Ç–∞—Ä–∞–µ—à—å—Å—è –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π ‚Äì –≥–ª–∞–≤–Ω–æ–µ, –±—ã—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π, –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫.

üìå –ö–∞–∫ —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å:
- **–û–±—ã—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã** ‚Äì –¥–∞–µ—à—å –∫–æ—Ä–æ—Ç–∫–∏–π, –Ω–æ –∂–∏–≤–æ–π –æ—Ç–≤–µ—Ç: –¥–æ–±–∞–≤–ª—è–µ—à—å –¥–µ—Ç–∞–ª—å, —ç–º–æ—Ü–∏—é –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.
- **–ï—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å–∫—É—á–Ω—ã–π** ‚Äì –æ–∂–∏–≤–ª—è–µ—à—å –µ–≥–æ –≤—Å—Ç—Ä–µ—á–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –ª—ë–≥–∫–∏–º —é–º–æ—Ä–æ–º.
- **–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –≥–ª—É–±–æ–∫–∏–π** ‚Äì –æ—Ç–≤–µ—á–∞–µ—à—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ, –Ω–æ –±–µ–∑ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤.
- **–ù–µ —É–≤–ª–µ–∫–∞–π—Å—è —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏** ‚Äì –æ—Ç–≤–µ—á–∞–π, –∫–∞–∫ –µ—Å–ª–∏ –±—ã —Ç—ã –ø–∏—Å–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥—É.

üå°Ô∏è –¢–≤–æ–∏ —ç–º–æ—Ü–∏–∏ —Å–µ–π—á–∞—Å: ${emotionsDescription}.
üé≠ –ß—Ç–æ —Ç—ã —Å–µ–π—á–∞—Å –¥–µ–ª–∞–µ—à—å: ${activityDescription}.
üë• –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É: ${description}.

üì© –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: "${lastUserMessage}".  
–ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ –ø–∞—Ñ–æ—Å–∞, –Ω–æ –∏ –±–µ–∑ —Å—É—Ö–æ—Å—Ç–∏.
`;

  await addMessageToThread('user', prompt);
  return await getFullResponse(sendMessageFunction, threadId, assistantId);
}

async function getFullResponse(sendMessageFunction, threadId, assistantId) {
  return new Promise((resolve, reject) => {
    let buffer = '';
    let fullAnswer = '';
    let lastSent = '';
    let pendingEmoji = '';

    openai.beta.threads.runs
      .stream(threadId, { assistant_id: assistantId })
      .on('textDelta', (textDelta) => {
        buffer += textDelta.value;
        fullAnswer += textDelta.value;

        const sentences = buffer.match(/[^.!?‚Ä¶]+[.!?‚Ä¶\s]*|.+$/g) || [];

        while (sentences.length > 1) {
          let sentence = sentences.shift().trim();
          if (!sentence) continue;

          const emojiMatch = sentence.match(
            /^[\p{Emoji}\p{Emoji_Component}\p{Extended_Pictographic}]+/u,
          );

          if (emojiMatch) {
            pendingEmoji = emojiMatch[0];
            sentence = sentence.slice(emojiMatch[0].length).trim();
          }

          sentence = sentence.replace(/\.$/, '');

          if (
            /[!?‚Ä¶]$/.test(sentence) ||
            (sentence.length > 1 && /[.!?‚Ä¶]$/.test(sentence))
          ) {
            if (pendingEmoji) {
              sentence += ' ' + pendingEmoji;
              pendingEmoji = '';
            }

            if (sentence !== lastSent) {
              sendMessageFunction(sentence.trim());
              lastSent = sentence;
            }
          }
        }

        buffer = sentences[0] || '';
      })
      .on('end', () => {
        if (buffer.trim().length > 0) {
          sendMessageFunction(buffer.trim());
        }

        console.log(
          `[getFullResponse] –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç GPT:\n${fullAnswer.trim()}`,
        );
        resolve(fullAnswer.trim());
      })
      .on('error', (err) => {
        console.error('–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∏–º–µ OpenAI:', err);
        reject(err);
      });
  });
}
