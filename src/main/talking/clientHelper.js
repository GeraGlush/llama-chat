import { Api } from 'telegram';
import { shuffleArray } from '../../helpers.js';

export async function setTypingStatus(client, username) {
  try {
    await client.invoke(
      new Api.messages.SetTyping({
        peer: username,
        action: new Api.SendMessageTypingAction(),
      }),
    );
  } catch (error) {}
}

export async function readMessages(client, peer) {
  try {
    await client.invoke(
      new Api.messages.ReadHistory({
        peer,
      }),
    );
  } catch (err) {}
}

export async function cancelTypingStatus(client, username) {
  try {
    await client.invoke(
      new Api.messages.SetTyping({
        peer: username,
        action: new Api.SendMessageCancelAction(),
      }),
    );
  } catch (error) {}
}

function isEmoji(str) {
  // –£–¥–∞–ª—è–µ–º variation selector (U+FE0F), —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ª–æ–º–∞–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
  const cleaned = str.normalize('NFC').replace(/\uFE0F/g, '');
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∏–∑ –æ–¥–Ω–æ–≥–æ emoji –∏–ª–∏ –¥–≤—É—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, üë®‚Äçüë©‚Äçüëß‚Äçüë¶)
  return (
    cleaned.match(/^\p{Extended_Pictographic}$/u) !== null ||
    [...cleaned].every((char) => /\p{Emoji}/u.test(char))
  );
}

export async function sendReaction(client, username, emoji) {
  const allStickers = await client.invoke(
    new Api.messages.GetAllStickers({ hash: 0 }),
  );

  if (!isEmoji(emoji)) {
    console.log(`üö´ '${emoji}' –Ω–µ emoji ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É`);
    return;
  }

  console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${allStickers.sets.length} —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤`);

  const matchedStickers = [];

  for (const set of allStickers.sets) {
    console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–∫: ${set.title}`);

    const inputSet = new Api.InputStickerSetID({
      id: set.id,
      accessHash: set.accessHash,
    });

    const fullSet = await client.invoke(
      new Api.messages.GetStickerSet({ stickerset: inputSet }),
    );

    for (const doc of fullSet.documents) {
      const isMatch = doc.attributes.some(
        (attr) =>
          attr instanceof Api.DocumentAttributeSticker && attr.alt === emoji,
      );
      if (isMatch) {
        matchedStickers.push(doc);
      }
    }
  }

  if (matchedStickers.length > 0) {
    shuffleArray(matchedStickers); // üëà –ü–µ—Ä–µ–º–µ—à–∞–ª–∏
    const randomSticker = matchedStickers[0]; // üëà –í–∑—è–ª–∏ –ø–µ—Ä–≤—ã–π
    console.log(`üé≤ –í—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–∫–µ—Ä —Å ${emoji}`);
    await client.sendFile(username, {
      file: randomSticker,
      forceDocument: false,
    });
  } else {
    console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∏–∫–µ—Ä —Å emoji ${emoji}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º emoji`);
    await client.sendMessage(username, {
      message: emoji,
    });
  }
}
